{
    "data": {
        "markdownRemark": {
            "html": "<h1>How to build your first NodeJS Server</h1>\n<p>Now we move onto something a little more advanced, as we take a look at how we can use HTTP in our Node application.</p>\n<p>So let’s cd into the proj folder as we did before and this time, create a folder called ‘hello-http’ and then create a file\nwithin that which will contain our code. So follow the steps below:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-bash\"><code>$ <span class=\"token function\">cd</span> ~/proj\n$ <span class=\"token function\">mkdir</span> hello-http\n$ <span class=\"token function\">cd</span> hello-http\n$ <span class=\"token function\">touch</span> hello.js\n$ code hello.js\n</code></pre>\n      </div>\n<p>Now Visual Studio Code is open and ready for business, copy and paste the code below into the hello.js file, then save it.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token comment\" spellcheck=\"true\">// Load the http module to create an http server.</span>\n<span class=\"token keyword\">var</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Configure our HTTP server to respond with Hello World to all requests.</span>\n<span class=\"token keyword\">var</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Listen on port 8000, IP defaults to 127.0.0.1</span>\nserver<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Put a friendly message on the terminal</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server running at http://127.0.0.1:8000/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<p>Now let’s run this and see what happens.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-bash\"><code>$ node hello\n</code></pre>\n      </div>\n<p>You should see a message appear on the console saying “Server running at <a href=\"http://127.0.0.1:8000/\">http://127.0.0.1:8000/</a>” and if you now open up a\nbrowser and type in the address “localhost:8000” and hit Enter, you should see that it displays:</p>\n<p>“Hello World”</p>\n<p>You can stop the process by switching back to the terminal window and press “CTRL and C” simultaneously.</p>",
            "frontmatter": {
                "title": "Hello HTTP"
            }
        }
    },
    "pathContext": {
        "slug": "/guides/dandavis/week42/hello-http/"
    }
}